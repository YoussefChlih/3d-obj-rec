#!/usr/bin/env python3
"""
Script de lancement pour l'interface de classification d'objets 3D
"""

import subprocess
import sys
import os
import webbrowser
import time

def check_python():
    """V√©rifie que Python est install√©"""
    try:
        version = sys.version_info
        if version.major < 3 or (version.major == 3 and version.minor < 8):
            print("‚ùå Python 3.8+ requis. Version actuelle:", sys.version)
            return False
        print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} d√©tect√©")
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification de Python: {e}")
        return False

def install_requirements():
    """Installe les d√©pendances requises"""
    print("üì¶ Installation des d√©pendances...")
    try:
        subprocess.check_call([sys.executable, '-m', 'pip', 'install', '-r', 'requirements.txt'])
        print("‚úÖ D√©pendances install√©es avec succ√®s")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors de l'installation des d√©pendances: {e}")
        return False

def check_model():
    """V√©rifie la pr√©sence du mod√®le"""
    model_path = 'best_dgcnn_model.pth'
    if os.path.exists(model_path):
        print(f"‚úÖ Mod√®le trouv√©: {model_path}")
        return True
    else:
        print(f"‚ö†Ô∏è  Mod√®le non trouv√©: {model_path}")
        print("   L'interface fonctionnera en mode d√©monstration")
        return False

def create_demo_files():
    """Cr√©e les fichiers de d√©monstration"""
    print("üé® Cr√©ation des fichiers de d√©monstration...")
    try:
        subprocess.check_call([sys.executable, 'create_demo.py'])
        print("‚úÖ Fichiers de d√©monstration cr√©√©s")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ö†Ô∏è  Erreur lors de la cr√©ation des fichiers de d√©mo: {e}")
        return False

def launch_streamlit():
    """Lance l'application Streamlit"""
    print("üöÄ Lancement de l'interface web...")
    print("üì± L'interface s'ouvrira dans votre navigateur par d√©faut")
    print("üõë Pour arr√™ter l'application, appuyez sur Ctrl+C")
    print("=" * 50)
    
    try:
        # Ouvrir le navigateur apr√®s un d√©lai
        def open_browser():
            time.sleep(3)
            webbrowser.open('http://localhost:8501')
        
        import threading
        browser_thread = threading.Thread(target=open_browser)
        browser_thread.daemon = True
        browser_thread.start()
        
        # Lancer Streamlit
        subprocess.check_call([sys.executable, '-m', 'streamlit', 'run', 'app.py'])
        
    except KeyboardInterrupt:
        print("\nüëã Application arr√™t√©e par l'utilisateur")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors du lancement de Streamlit: {e}")
        print("üí° Essayez d'installer Streamlit manuellement: pip install streamlit")

def main():
    """Fonction principale"""
    print("=" * 60)
    print("üéØ Interface de Classification d'Objets 3D")
    print("   Powered by DGCNN (Dynamic Graph CNN)")
    print("=" * 60)
    
    # V√©rifications pr√©liminaires
    if not check_python():
        sys.exit(1)
    
    # V√©rifier les fichiers requis
    required_files = ['app.py', 'requirements.txt', 'create_demo.py']
    missing_files = [f for f in required_files if not os.path.exists(f)]
    
    if missing_files:
        print(f"‚ùå Fichiers manquants: {', '.join(missing_files)}")
        sys.exit(1)
    
    print("‚úÖ Tous les fichiers requis sont pr√©sents")
    
    # Installation des d√©pendances
    if not install_requirements():
        print("‚ùå √âchec de l'installation des d√©pendances")
        sys.exit(1)
    
    # V√©rification du mod√®le
    check_model()
    
    # Cr√©ation des fichiers de d√©monstration
    create_demo_files()
    
    # Lancement de l'interface
    print("\n" + "=" * 50)
    launch_streamlit()

if __name__ == "__main__":
    main()
